{"version":3,"sources":["webpack:///./node_modules/mongodb-stitch-browser-services-mongodb-remote/dist/esm/RemoteMongoCursor.js","webpack:///./node_modules/mongodb-stitch-browser-services-mongodb-remote/dist/esm/RemoteMongoReadOperation.js","webpack:///./node_modules/mongodb-stitch-browser-services-mongodb-remote/dist/esm/internal/RemoteMongoCollectionImpl.js","webpack:///./node_modules/mongodb-stitch-browser-services-mongodb-remote/dist/esm/internal/RemoteMongoDatabaseImpl.js","webpack:///./node_modules/mongodb-stitch-browser-services-mongodb-remote/dist/esm/internal/RemoteMongoClientImpl.js","webpack:///./node_modules/mongodb-stitch-browser-services-mongodb-remote/dist/esm/RemoteMongoClient.js","webpack:///./node_modules/mongodb-stitch-browser-services-mongodb-remote/dist/esm/index.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACc,2EAAiB,EAAC;AACjC,6C;;ACVoD;AACpD,IAAI,iDAAwB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,YAAY,qBAAiB,MAAM,EAAE;AAC/F;AACA;AACA,CAAC;AACc,kHAAwB,EAAC;AACxC,oD;;ACpBmE;AACnE,IAAI,mDAAyB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACc,0HAAyB,EAAC;AACzC,qD;;ACzDoE;AACpE,IAAI,+CAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAyB;AAC5C;AACA;AACA,CAAC;AACc,oHAAuB,EAAC;AACvC,mD;;ACZgE;AAChE,IAAI,2CAAqB;AACzB;AACA;AACA;AACA;AACA,mBAAmB,gCAAuB;AAC1C;AACA;AACA,CAAC;AACc,8GAAqB,EAAC;AACrC,iD;;ACXwF;AACnB;AAC9D,IAAI,mCAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA,uBAAuB,8BAAqB,KAAK,wCAAyB;AAC1E;AACA;AACA,KAAK;AACL,CAAC,EAAE,mCAAiB,KAAK,mCAAiB,KAAK;AAC/C,6C;;ACbA;AAAA;AAAA;AAAqF;AAC7B;AACU;AACa;AAC/E,iC","file":"npm.mongodb-stitch-browser-services-mongodb-remote.da0399540.js","sourcesContent":["var RemoteMongoCursor = (function () {\n    function RemoteMongoCursor(proxy) {\n        this.proxy = proxy;\n    }\n    RemoteMongoCursor.prototype.next = function () {\n        return Promise.resolve(this.proxy.next().value);\n    };\n    return RemoteMongoCursor;\n}());\nexport default RemoteMongoCursor;\n//# sourceMappingURL=RemoteMongoCursor.js.map","import RemoteMongoCursor from \"./RemoteMongoCursor\";\nvar RemoteMongoReadOperation = (function () {\n    function RemoteMongoReadOperation(proxy) {\n        this.proxy = proxy;\n    }\n    RemoteMongoReadOperation.prototype.first = function () {\n        return this.proxy.first();\n    };\n    RemoteMongoReadOperation.prototype.toArray = function () {\n        return this.proxy.toArray();\n    };\n    RemoteMongoReadOperation.prototype.asArray = function () {\n        return this.toArray();\n    };\n    RemoteMongoReadOperation.prototype.iterator = function () {\n        return this.proxy.iterator().then(function (res) { return new RemoteMongoCursor(res); });\n    };\n    return RemoteMongoReadOperation;\n}());\nexport default RemoteMongoReadOperation;\n//# sourceMappingURL=RemoteMongoReadOperation.js.map","import RemoteMongoReadOperation from \"../RemoteMongoReadOperation\";\nvar RemoteMongoCollectionImpl = (function () {\n    function RemoteMongoCollectionImpl(proxy) {\n        this.proxy = proxy;\n        this.namespace = this.proxy.namespace;\n    }\n    RemoteMongoCollectionImpl.prototype.withCollectionType = function (codec) {\n        return new RemoteMongoCollectionImpl(this.proxy.withCollectionType(codec));\n    };\n    RemoteMongoCollectionImpl.prototype.count = function (query, options) {\n        return this.proxy.count(query, options);\n    };\n    RemoteMongoCollectionImpl.prototype.find = function (query, options) {\n        return new RemoteMongoReadOperation(this.proxy.find(query, options));\n    };\n    RemoteMongoCollectionImpl.prototype.findOne = function (query, options) {\n        return this.proxy.findOne(query, options);\n    };\n    RemoteMongoCollectionImpl.prototype.findOneAndUpdate = function (query, update, options) {\n        return this.proxy.findOneAndUpdate(query, update, options);\n    };\n    RemoteMongoCollectionImpl.prototype.findOneAndReplace = function (query, replacement, options) {\n        return this.proxy.findOneAndReplace(query, replacement, options);\n    };\n    RemoteMongoCollectionImpl.prototype.findOneAndDelete = function (query, options) {\n        return this.proxy.findOneAndDelete(query, options);\n    };\n    RemoteMongoCollectionImpl.prototype.aggregate = function (pipeline) {\n        return new RemoteMongoReadOperation(this.proxy.aggregate(pipeline));\n    };\n    RemoteMongoCollectionImpl.prototype.insertOne = function (doc) {\n        return this.proxy.insertOne(doc);\n    };\n    RemoteMongoCollectionImpl.prototype.insertMany = function (docs) {\n        return this.proxy.insertMany(docs);\n    };\n    RemoteMongoCollectionImpl.prototype.deleteOne = function (query) {\n        return this.proxy.deleteOne(query);\n    };\n    RemoteMongoCollectionImpl.prototype.deleteMany = function (query) {\n        return this.proxy.deleteMany(query);\n    };\n    RemoteMongoCollectionImpl.prototype.updateOne = function (query, update, updateOptions) {\n        return this.proxy.updateOne(query, update, updateOptions);\n    };\n    RemoteMongoCollectionImpl.prototype.updateMany = function (query, update, updateOptions) {\n        return this.proxy.updateMany(query, update, updateOptions);\n    };\n    RemoteMongoCollectionImpl.prototype.watch = function (arg) {\n        return this.proxy.watch(arg);\n    };\n    RemoteMongoCollectionImpl.prototype.watchCompact = function (ids) {\n        return this.proxy.watchCompact(ids);\n    };\n    return RemoteMongoCollectionImpl;\n}());\nexport default RemoteMongoCollectionImpl;\n//# sourceMappingURL=RemoteMongoCollectionImpl.js.map","import RemoteMongoCollectionImpl from \"./RemoteMongoCollectionImpl\";\nvar RemoteMongoDatabaseImpl = (function () {\n    function RemoteMongoDatabaseImpl(proxy) {\n        this.proxy = proxy;\n        this.name = this.proxy.name;\n    }\n    RemoteMongoDatabaseImpl.prototype.collection = function (name, codec) {\n        return new RemoteMongoCollectionImpl(this.proxy.collection(name, codec));\n    };\n    return RemoteMongoDatabaseImpl;\n}());\nexport default RemoteMongoDatabaseImpl;\n//# sourceMappingURL=RemoteMongoDatabaseImpl.js.map","import RemoteMongoDatabaseImpl from \"./RemoteMongoDatabaseImpl\";\nvar RemoteMongoClientImpl = (function () {\n    function RemoteMongoClientImpl(proxy) {\n        this.proxy = proxy;\n    }\n    RemoteMongoClientImpl.prototype.db = function (name) {\n        return new RemoteMongoDatabaseImpl(this.proxy.db(name));\n    };\n    return RemoteMongoClientImpl;\n}());\nexport default RemoteMongoClientImpl;\n//# sourceMappingURL=RemoteMongoClientImpl.js.map","import { CoreRemoteMongoClientImpl } from \"mongodb-stitch-core-services-mongodb-remote\";\nimport RemoteMongoClientImpl from \"./internal/RemoteMongoClientImpl\";\nexport var RemoteMongoClient;\n(function (RemoteMongoClient) {\n    RemoteMongoClient.factory = new (function () {\n        function class_1() {\n        }\n        class_1.prototype.getNamedClient = function (service, client) {\n            return new RemoteMongoClientImpl(new CoreRemoteMongoClientImpl(service));\n        };\n        return class_1;\n    }())();\n})(RemoteMongoClient || (RemoteMongoClient = {}));\n//# sourceMappingURL=RemoteMongoClient.js.map","import { RemoteInsertManyResult } from \"mongodb-stitch-core-services-mongodb-remote\";\nimport { RemoteMongoClient } from \"./RemoteMongoClient\";\nimport RemoteMongoReadOperation from \"./RemoteMongoReadOperation\";\nexport { RemoteInsertManyResult, RemoteMongoReadOperation, RemoteMongoClient };\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}