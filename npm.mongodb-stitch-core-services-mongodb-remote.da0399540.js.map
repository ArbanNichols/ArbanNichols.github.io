{"version":3,"sources":["webpack:///./node_modules/mongodb-stitch-core-services-mongodb-remote/dist/esm/internal/CoreRemoteMongoReadOperation.js","webpack:///./node_modules/mongodb-stitch-core-services-mongodb-remote/dist/esm/OperationType.js","webpack:///./node_modules/mongodb-stitch-core-services-mongodb-remote/dist/esm/RemoteInsertManyResult.js","webpack:///./node_modules/mongodb-stitch-core-services-mongodb-remote/dist/esm/internal/ResultDecoders.js","webpack:///./node_modules/mongodb-stitch-core-services-mongodb-remote/dist/esm/internal/CoreRemoteMongoCollectionImpl.js","webpack:///./node_modules/mongodb-stitch-core-services-mongodb-remote/dist/esm/internal/CoreRemoteMongoDatabaseImpl.js","webpack:///./node_modules/mongodb-stitch-core-services-mongodb-remote/dist/esm/internal/CoreRemoteMongoClientImpl.js","webpack:///./node_modules/mongodb-stitch-core-services-mongodb-remote/dist/esm/index.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,0BAA0B,EAAE;AAClF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uDAAuD,+BAA+B,EAAE;AACxF;AACA;AACA,uDAAuD,eAAe,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACc,sGAA4B,EAAC;AAC5C,wD;;;;;ACrCO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;ACtBA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACc,qFAAsB,EAAC;AACtC,kD;;ACXqD;AACM;AACI;AAC/D;AACA;AACA;AACA,CAAC,oEAAoE;AACrE;AACA;AACA;AACA,CAAC,kEAAkE;AACnE;AACA;AACA;AACA;AACA;AACA,CAAC,4DAA4D;AAC7D;AACA;AACA;AACA,CAAC,4DAA4D;AAC7D;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4DAA4D;AAC7D,IAAI,4CAA6B;AACjC;AACA;AACA;AACA,mBAAmB,0BAAsB;AACzC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,IAAI,uCAAwB;AAC5B;AACA;AACA;AACA,QAAQ,yBAAU;AAClB,QAAQ,yBAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,IAAI,iCAAkB;AACtB;AACA;AACA;AACA;AACA,QAAQ,yBAAU;AAClB,QAAQ,yBAAU;AAClB,QAAQ,yBAAU;AAClB,QAAQ,yBAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA,CAAC;AACD,IAAI,wCAAyB;AAC7B;AACA;AACA;AACA;AACA,QAAQ,yBAAU;AAClB,QAAQ,yBAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,uDAAuD,4CAA6B;AACpF;AACA;AACA;AACA,kDAAkD,uCAAwB;AAC1E,wCAAwC,iCAAkB;AAC1D,+CAA+C,wCAAyB;AACxE;AACA,CAAC;AACc,0EAAc,EAAC;AAC9B,0C;;AC9LA,gBAAgB,SAAI,IAAI,SAAI;AAC5B,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACwB;AACkD;AAC5B;AAC9C,IAAI,2DAA6B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,SAAS,EAAE,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qCAA4B;AAC/C;AACA;AACA,gCAAgC,aAAa;AAC7C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,mBAAmB,qCAA4B;AAC/C;AACA;AACA,+BAA+B,YAAY;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,8DAA8D,uBAAc;AAC5E;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,SAAS;AACT,+DAA+D,uBAAc;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,uBAAc;AAC9E;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,gEAAgE,uBAAc;AAC9E;AACA;AACA,8BAA8B;AAC9B;AACA,qFAAqF,uBAAc;AACnG;AACA;AACA,+BAA+B,eAAe;AAC9C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,qFAAqF,uBAAc;AACnG;AACA;AACA;AACA;AACA,6BAA6B,mCAAI;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC;AACc,sIAA6B,EAAC;AAC7C,yD;;ACrM4E;AAC5E,IAAI,uDAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA,mBAAmB,sCAA6B;AAChD;AACA;AACA,CAAC;AACc,gIAA2B,EAAC;AAC3C,uD;;ACZwE;AACxE,IAAI,mDAAyB;AAC7B;AACA;AACA;AACA;AACA,mBAAmB,oCAA2B;AAC9C;AACA;AACA,CAAC;AACc,0HAAyB,EAAC;AACzC,qD;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6E;AACQ;AACJ;AACE;AACnC;AACc;AACwG;AACtK,iC","file":"npm.mongodb-stitch-core-services-mongodb-remote.da0399540.js","sourcesContent":["var CoreRemoteMongoReadOperation = (function () {\n    function CoreRemoteMongoReadOperation(command, args, service, decoder) {\n        this.command = command;\n        this.args = args;\n        this.service = service;\n        if (decoder) {\n            this.collectionDecoder = new (function () {\n                function class_1() {\n                }\n                class_1.prototype.decode = function (from) {\n                    if (from instanceof Array) {\n                        return from.map(function (t) { return decoder.decode(t); });\n                    }\n                    return [decoder.decode(from)];\n                };\n                return class_1;\n            }())();\n        }\n    }\n    CoreRemoteMongoReadOperation.prototype.iterator = function () {\n        return this.executeRead().then(function (res) { return res[Symbol.iterator](); });\n    };\n    CoreRemoteMongoReadOperation.prototype.first = function () {\n        return this.executeRead().then(function (res) { return res[0]; });\n    };\n    CoreRemoteMongoReadOperation.prototype.toArray = function () {\n        return this.executeRead();\n    };\n    CoreRemoteMongoReadOperation.prototype.asArray = function () {\n        return this.toArray();\n    };\n    CoreRemoteMongoReadOperation.prototype.executeRead = function () {\n        return this.service.callFunction(this.command, [this.args], this.collectionDecoder);\n    };\n    return CoreRemoteMongoReadOperation;\n}());\nexport default CoreRemoteMongoReadOperation;\n//# sourceMappingURL=CoreRemoteMongoReadOperation.js.map","export var OperationType;\n(function (OperationType) {\n    OperationType[\"Insert\"] = \"insert\";\n    OperationType[\"Delete\"] = \"delete\";\n    OperationType[\"Replace\"] = \"replace\";\n    OperationType[\"Update\"] = \"update\";\n    OperationType[\"Unknown\"] = \"unknown\";\n})(OperationType || (OperationType = {}));\nexport function operationTypeFromRemote(type) {\n    switch (type) {\n        case \"insert\":\n            return OperationType.Insert;\n        case \"delete\":\n            return OperationType.Delete;\n        case \"replace\":\n            return OperationType.Replace;\n        case \"update\":\n            return OperationType.Update;\n        default:\n            return OperationType.Unknown;\n    }\n}\n//# sourceMappingURL=OperationType.js.map","var RemoteInsertManyResult = (function () {\n    function RemoteInsertManyResult(arr) {\n        var inserted = {};\n        arr.forEach(function (value, index) {\n            inserted[index] = value;\n        });\n        this.insertedIds = inserted;\n    }\n    return RemoteInsertManyResult;\n}());\nexport default RemoteInsertManyResult;\n//# sourceMappingURL=RemoteInsertManyResult.js.map","import { Assertions } from \"mongodb-stitch-core-sdk\";\nimport { operationTypeFromRemote } from \"../OperationType\";\nimport RemoteInsertManyResult from \"../RemoteInsertManyResult\";\nvar RemoteInsertManyResultFields;\n(function (RemoteInsertManyResultFields) {\n    RemoteInsertManyResultFields[\"InsertedIds\"] = \"insertedIds\";\n})(RemoteInsertManyResultFields || (RemoteInsertManyResultFields = {}));\nvar RemoteInsertOneResultFields;\n(function (RemoteInsertOneResultFields) {\n    RemoteInsertOneResultFields[\"InsertedId\"] = \"insertedId\";\n})(RemoteInsertOneResultFields || (RemoteInsertOneResultFields = {}));\nvar RemoteUpdateResultFields;\n(function (RemoteUpdateResultFields) {\n    RemoteUpdateResultFields[\"MatchedCount\"] = \"matchedCount\";\n    RemoteUpdateResultFields[\"ModifiedCount\"] = \"modifiedCount\";\n    RemoteUpdateResultFields[\"UpsertedId\"] = \"upsertedId\";\n})(RemoteUpdateResultFields || (RemoteUpdateResultFields = {}));\nvar RemoteDeleteResultFields;\n(function (RemoteDeleteResultFields) {\n    RemoteDeleteResultFields[\"DeletedCount\"] = \"deletedCount\";\n})(RemoteDeleteResultFields || (RemoteDeleteResultFields = {}));\nvar UpdateDescriptionFields;\n(function (UpdateDescriptionFields) {\n    UpdateDescriptionFields[\"UpdatedFields\"] = \"updatedFields\";\n    UpdateDescriptionFields[\"RemovedFields\"] = \"removedFields\";\n})(UpdateDescriptionFields || (UpdateDescriptionFields = {}));\nvar ChangeEventFields;\n(function (ChangeEventFields) {\n    ChangeEventFields[\"Id\"] = \"_id\";\n    ChangeEventFields[\"OperationType\"] = \"operationType\";\n    ChangeEventFields[\"FullDocument\"] = \"fullDocument\";\n    ChangeEventFields[\"DocumentKey\"] = \"documentKey\";\n    ChangeEventFields[\"Namespace\"] = \"ns\";\n    ChangeEventFields[\"NamespaceDb\"] = \"db\";\n    ChangeEventFields[\"NamespaceColl\"] = \"coll\";\n    ChangeEventFields[\"UpdateDescription\"] = \"updateDescription\";\n})(ChangeEventFields || (ChangeEventFields = {}));\nvar CompactChangeEventFields;\n(function (CompactChangeEventFields) {\n    CompactChangeEventFields[\"OperationType\"] = \"ot\";\n    CompactChangeEventFields[\"FullDocument\"] = \"fd\";\n    CompactChangeEventFields[\"DocumentKey\"] = \"dk\";\n    CompactChangeEventFields[\"UpdateDescription\"] = \"ud\";\n    CompactChangeEventFields[\"StitchDocumentVersion\"] = \"sdv\";\n    CompactChangeEventFields[\"StitchDocumentHash\"] = \"sdh\";\n})(CompactChangeEventFields || (CompactChangeEventFields = {}));\nvar RemoteInsertManyResultDecoder = (function () {\n    function RemoteInsertManyResultDecoder() {\n    }\n    RemoteInsertManyResultDecoder.prototype.decode = function (from) {\n        return new RemoteInsertManyResult(from[RemoteInsertManyResultFields.InsertedIds]);\n    };\n    return RemoteInsertManyResultDecoder;\n}());\nvar RemoteInsertOneResultDecoder = (function () {\n    function RemoteInsertOneResultDecoder() {\n    }\n    RemoteInsertOneResultDecoder.prototype.decode = function (from) {\n        return {\n            insertedId: from[RemoteInsertOneResultFields.InsertedId]\n        };\n    };\n    return RemoteInsertOneResultDecoder;\n}());\nvar RemoteUpdateResultDecoder = (function () {\n    function RemoteUpdateResultDecoder() {\n    }\n    RemoteUpdateResultDecoder.prototype.decode = function (from) {\n        return {\n            matchedCount: from[RemoteUpdateResultFields.MatchedCount],\n            modifiedCount: from[RemoteUpdateResultFields.ModifiedCount],\n            upsertedId: from[RemoteUpdateResultFields.UpsertedId]\n        };\n    };\n    return RemoteUpdateResultDecoder;\n}());\nvar RemoteDeleteResultDecoder = (function () {\n    function RemoteDeleteResultDecoder() {\n    }\n    RemoteDeleteResultDecoder.prototype.decode = function (from) {\n        return {\n            deletedCount: from[RemoteDeleteResultFields.DeletedCount]\n        };\n    };\n    return RemoteDeleteResultDecoder;\n}());\nvar UpdateDescriptionDecoder = (function () {\n    function UpdateDescriptionDecoder() {\n    }\n    UpdateDescriptionDecoder.prototype.decode = function (from) {\n        Assertions.keyPresent(UpdateDescriptionFields.UpdatedFields, from);\n        Assertions.keyPresent(UpdateDescriptionFields.RemovedFields, from);\n        return {\n            removedFields: from[UpdateDescriptionFields.RemovedFields],\n            updatedFields: from[UpdateDescriptionFields.UpdatedFields],\n        };\n    };\n    return UpdateDescriptionDecoder;\n}());\nfunction decodeBaseChangeEventFields(from, updateDescriptionField, fullDocumentField, decoder) {\n    var updateDescription;\n    if (updateDescriptionField in from) {\n        updateDescription = ResultDecoders.updateDescriptionDecoder.decode(from[updateDescriptionField]);\n    }\n    else {\n        updateDescription = undefined;\n    }\n    var fullDocument;\n    if (fullDocumentField in from) {\n        fullDocument = from[fullDocumentField];\n        if (decoder) {\n            fullDocument = decoder.decode(fullDocument);\n        }\n    }\n    else {\n        fullDocument = undefined;\n    }\n    return { updateDescription: updateDescription, fullDocument: fullDocument };\n}\nvar ChangeEventDecoder = (function () {\n    function ChangeEventDecoder(decoder) {\n        this.decoder = decoder;\n    }\n    ChangeEventDecoder.prototype.decode = function (from) {\n        Assertions.keyPresent(ChangeEventFields.Id, from);\n        Assertions.keyPresent(ChangeEventFields.OperationType, from);\n        Assertions.keyPresent(ChangeEventFields.Namespace, from);\n        Assertions.keyPresent(ChangeEventFields.DocumentKey, from);\n        var nsDoc = from[ChangeEventFields.Namespace];\n        var _a = decodeBaseChangeEventFields(from, ChangeEventFields.UpdateDescription, ChangeEventFields.FullDocument, this.decoder), updateDescription = _a.updateDescription, fullDocument = _a.fullDocument;\n        return {\n            documentKey: from[ChangeEventFields.DocumentKey],\n            fullDocument: fullDocument,\n            id: from[ChangeEventFields.Id],\n            namespace: {\n                collection: nsDoc[ChangeEventFields.NamespaceColl],\n                database: nsDoc[ChangeEventFields.NamespaceDb]\n            },\n            operationType: operationTypeFromRemote(from[ChangeEventFields.OperationType]),\n            updateDescription: updateDescription\n        };\n    };\n    return ChangeEventDecoder;\n}());\nvar CompactChangeEventDecoder = (function () {\n    function CompactChangeEventDecoder(decoder) {\n        this.decoder = decoder;\n    }\n    CompactChangeEventDecoder.prototype.decode = function (from) {\n        Assertions.keyPresent(CompactChangeEventFields.OperationType, from);\n        Assertions.keyPresent(CompactChangeEventFields.DocumentKey, from);\n        var _a = decodeBaseChangeEventFields(from, CompactChangeEventFields.UpdateDescription, CompactChangeEventFields.FullDocument, this.decoder), updateDescription = _a.updateDescription, fullDocument = _a.fullDocument;\n        var stitchDocumentVersion;\n        if (CompactChangeEventFields.StitchDocumentVersion in from) {\n            stitchDocumentVersion = from[CompactChangeEventFields.StitchDocumentVersion];\n        }\n        else {\n            stitchDocumentVersion = undefined;\n        }\n        var stitchDocumentHash;\n        if (CompactChangeEventFields.StitchDocumentHash in from) {\n            stitchDocumentHash = from[CompactChangeEventFields.StitchDocumentHash];\n        }\n        else {\n            stitchDocumentHash = undefined;\n        }\n        return {\n            documentKey: from[CompactChangeEventFields.DocumentKey],\n            fullDocument: fullDocument,\n            operationType: operationTypeFromRemote(from[CompactChangeEventFields.OperationType]),\n            stitchDocumentHash: stitchDocumentHash,\n            stitchDocumentVersion: stitchDocumentVersion,\n            updateDescription: updateDescription,\n        };\n    };\n    return CompactChangeEventDecoder;\n}());\nvar ResultDecoders = (function () {\n    function ResultDecoders() {\n    }\n    ResultDecoders.remoteInsertManyResultDecoder = new RemoteInsertManyResultDecoder();\n    ResultDecoders.remoteInsertOneResultDecoder = new RemoteInsertOneResultDecoder();\n    ResultDecoders.remoteUpdateResultDecoder = new RemoteUpdateResultDecoder();\n    ResultDecoders.remoteDeleteResultDecoder = new RemoteDeleteResultDecoder();\n    ResultDecoders.updateDescriptionDecoder = new UpdateDescriptionDecoder();\n    ResultDecoders.ChangeEventDecoder = ChangeEventDecoder;\n    ResultDecoders.CompactChangeEventDecoder = CompactChangeEventDecoder;\n    return ResultDecoders;\n}());\nexport default ResultDecoders;\n//# sourceMappingURL=ResultDecoders.js.map","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport BSON from \"bson\";\nimport CoreRemoteMongoReadOperation from \"./CoreRemoteMongoReadOperation\";\nimport ResultDecoders from \"./ResultDecoders\";\nvar CoreRemoteMongoCollectionImpl = (function () {\n    function CoreRemoteMongoCollectionImpl(name, databaseName, service, codec) {\n        var _this = this;\n        this.name = name;\n        this.databaseName = databaseName;\n        this.service = service;\n        this.codec = codec;\n        this.namespace = this.databaseName + \".\" + this.name;\n        this.baseOperationArgs = (function () { return ({\n            collection: _this.name,\n            database: _this.databaseName\n        }); })();\n    }\n    CoreRemoteMongoCollectionImpl.prototype.withCollectionType = function (codec) {\n        return new CoreRemoteMongoCollectionImpl(this.name, this.databaseName, this.service, codec);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.find = function (filter, options) {\n        if (filter === void 0) { filter = {}; }\n        var args = __assign({}, this.baseOperationArgs);\n        args.query = filter;\n        if (options) {\n            if (options.limit) {\n                args.limit = options.limit;\n            }\n            if (options.projection) {\n                args.project = options.projection;\n            }\n            if (options.sort) {\n                args.sort = options.sort;\n            }\n        }\n        return new CoreRemoteMongoReadOperation(\"find\", args, this.service, this.codec);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.findOne = function (filter, options) {\n        if (filter === void 0) { filter = {}; }\n        var args = __assign({}, this.baseOperationArgs);\n        args.query = filter;\n        if (options) {\n            if (options.projection) {\n                args.project = options.projection;\n            }\n            if (options.sort) {\n                args.sort = options.sort;\n            }\n        }\n        return this.service.callFunction(\"findOne\", [args], this.codec);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.findOneAndUpdate = function (filter, update, options) {\n        var args = __assign({}, this.baseOperationArgs);\n        args.filter = filter;\n        args.update = update;\n        if (options) {\n            if (options.projection) {\n                args.projection = options.projection;\n            }\n            if (options.sort) {\n                args.sort = options.sort;\n            }\n            if (options.upsert) {\n                args.upsert = true;\n            }\n            if (options.returnNewDocument) {\n                args.returnNewDocument = true;\n            }\n        }\n        return this.service.callFunction(\"findOneAndUpdate\", [args], this.codec);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.findOneAndReplace = function (filter, replacement, options) {\n        var args = __assign({}, this.baseOperationArgs);\n        args.filter = filter;\n        args.update = replacement;\n        if (options) {\n            if (options.projection) {\n                args.projection = options.projection;\n            }\n            if (options.sort) {\n                args.sort = options.sort;\n            }\n            if (options.upsert) {\n                args.upsert = true;\n            }\n            if (options.returnNewDocument) {\n                args.returnNewDocument = true;\n            }\n        }\n        return this.service.callFunction(\"findOneAndReplace\", [args], this.codec);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.findOneAndDelete = function (filter, options) {\n        var args = __assign({}, this.baseOperationArgs);\n        args.filter = filter;\n        if (options) {\n            if (options.projection) {\n                args.projection = options.projection;\n            }\n            if (options.sort) {\n                args.sort = options.sort;\n            }\n        }\n        return this.service.callFunction(\"findOneAndDelete\", [args], this.codec);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.aggregate = function (pipeline) {\n        var args = __assign({}, this.baseOperationArgs);\n        args.pipeline = pipeline;\n        return new CoreRemoteMongoReadOperation(\"aggregate\", args, this.service, this.codec);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.count = function (query, options) {\n        if (query === void 0) { query = {}; }\n        var args = __assign({}, this.baseOperationArgs);\n        args.query = query;\n        if (options && options.limit) {\n            args.limit = options.limit;\n        }\n        return this.service.callFunction(\"count\", [args]);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.insertOne = function (value) {\n        var args = __assign({}, this.baseOperationArgs);\n        args.document = this.generateObjectIdIfMissing(this.codec ? this.codec.encode(value) : value);\n        return this.service.callFunction(\"insertOne\", [args], ResultDecoders.remoteInsertOneResultDecoder);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.insertMany = function (docs) {\n        var _this = this;\n        var args = __assign({}, this.baseOperationArgs);\n        args.documents = docs.map(function (doc) {\n            return _this.generateObjectIdIfMissing(_this.codec ? _this.codec.encode(doc) : doc);\n        });\n        return this.service.callFunction(\"insertMany\", [args], ResultDecoders.remoteInsertManyResultDecoder);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.deleteOne = function (query) {\n        return this.executeDelete(query, false);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.deleteMany = function (query) {\n        return this.executeDelete(query, true);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.updateOne = function (query, update, options) {\n        return this.executeUpdate(query, update, options, false);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.updateMany = function (query, update, options) {\n        return this.executeUpdate(query, update, options, true);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.watch = function (arg) {\n        var args = __assign({}, this.baseOperationArgs);\n        if (arg !== undefined) {\n            if (arg instanceof Array) {\n                if (arg.length !== 0) {\n                    args.ids = arg;\n                }\n            }\n            else if (arg instanceof Object) {\n                args.filter = arg;\n            }\n        }\n        args.useCompactEvents = false;\n        return this.service.streamFunction(\"watch\", [args], new ResultDecoders.ChangeEventDecoder(this.codec));\n    };\n    CoreRemoteMongoCollectionImpl.prototype.watchCompact = function (ids) {\n        var args = __assign({}, this.baseOperationArgs);\n        args.ids = ids;\n        args.useCompactEvents = true;\n        return this.service.streamFunction(\"watch\", [args], new ResultDecoders.CompactChangeEventDecoder(this.codec));\n    };\n    CoreRemoteMongoCollectionImpl.prototype.executeDelete = function (query, multi) {\n        var args = __assign({}, this.baseOperationArgs);\n        args.query = query;\n        return this.service.callFunction(multi ? \"deleteMany\" : \"deleteOne\", [args], ResultDecoders.remoteDeleteResultDecoder);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.executeUpdate = function (query, update, options, multi) {\n        if (multi === void 0) { multi = false; }\n        var args = __assign({}, this.baseOperationArgs);\n        args.query = query;\n        args.update = update;\n        if (options && options.upsert) {\n            args.upsert = options.upsert;\n        }\n        return this.service.callFunction(multi ? \"updateMany\" : \"updateOne\", [args], ResultDecoders.remoteUpdateResultDecoder);\n    };\n    CoreRemoteMongoCollectionImpl.prototype.generateObjectIdIfMissing = function (doc) {\n        if (!doc._id) {\n            var newDoc = doc;\n            newDoc._id = new BSON.ObjectID();\n            return newDoc;\n        }\n        return doc;\n    };\n    return CoreRemoteMongoCollectionImpl;\n}());\nexport default CoreRemoteMongoCollectionImpl;\n//# sourceMappingURL=CoreRemoteMongoCollectionImpl.js.map","import CoreRemoteMongoCollectionImpl from \"./CoreRemoteMongoCollectionImpl\";\nvar CoreRemoteMongoDatabaseImpl = (function () {\n    function CoreRemoteMongoDatabaseImpl(name, service) {\n        this.name = name;\n        this.service = service;\n    }\n    CoreRemoteMongoDatabaseImpl.prototype.collection = function (name, codec) {\n        return new CoreRemoteMongoCollectionImpl(name, this.name, this.service, codec);\n    };\n    return CoreRemoteMongoDatabaseImpl;\n}());\nexport default CoreRemoteMongoDatabaseImpl;\n//# sourceMappingURL=CoreRemoteMongoDatabaseImpl.js.map","import CoreRemoteMongoDatabaseImpl from \"./CoreRemoteMongoDatabaseImpl\";\nvar CoreRemoteMongoClientImpl = (function () {\n    function CoreRemoteMongoClientImpl(service) {\n        this.service = service;\n    }\n    CoreRemoteMongoClientImpl.prototype.db = function (name) {\n        return new CoreRemoteMongoDatabaseImpl(name, this.service);\n    };\n    return CoreRemoteMongoClientImpl;\n}());\nexport default CoreRemoteMongoClientImpl;\n//# sourceMappingURL=CoreRemoteMongoClientImpl.js.map","import CoreRemoteMongoClientImpl from \"./internal/CoreRemoteMongoClientImpl\";\nimport CoreRemoteMongoCollectionImpl from \"./internal/CoreRemoteMongoCollectionImpl\";\nimport CoreRemoteMongoDatabaseImpl from \"./internal/CoreRemoteMongoDatabaseImpl\";\nimport CoreRemoteMongoReadOperation from \"./internal/CoreRemoteMongoReadOperation\";\nimport { OperationType } from \"./OperationType\";\nimport RemoteInsertManyResult from \"./RemoteInsertManyResult\";\nexport { CoreRemoteMongoClientImpl, CoreRemoteMongoCollectionImpl, CoreRemoteMongoDatabaseImpl, CoreRemoteMongoReadOperation, RemoteInsertManyResult, OperationType };\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}