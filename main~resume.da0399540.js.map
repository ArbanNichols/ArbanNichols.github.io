{"version":3,"sources":["webpack:///./src/jsx/components/common/context.jsx"],"names":["Context","React","createContext","client","Stitch","initializeDefaultAppClient","Provider","experiences","auth","loginWithCredential","AnonymousCredential","db","getServiceClient","RemoteMongoClient","factory","collection","find","asArray","res","setState","console","log","state","props","children","Component","Consumer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAMA,IAAMA,OAAO,GAAGC,4CAAK,CAACC,aAAN,EAAhB;AACA,IAAMC,MAAM,GAAGC,yEAAM,CAACC,0BAAP,CAAkC,oBAAlC,CAAf;AAEO,IAAMC,QAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,4DACU;AACNC,iBAAW,EAAE;AADP,KADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAOYJ,MAAM,CAACK,IAAP,CAAYC,mBAAZ,CAAgC,IAAIC,sFAAJ,EAAhC,CAPZ;;AAAA;AAQYC,gBARZ,GAQiBR,MAAM,CACdS,gBADQ,CACSC,oFAAiB,CAACC,OAD3B,EACoC,eADpC,EAERH,EAFQ,CAEL,QAFK,CARjB;AAAA;AAAA,8CAYsBA,EAAE,CACfI,UADa,CACF,YADE,EAEbC,IAFa,GAGbC,OAHa,EAZtB;;AAAA;AAYUC,iBAZV;AAgBM,mBAAKC,QAAL,CAAc;AAAEZ,2BAAW,qBAAMW,GAAN;AAAb,eAAd;AAhBN;AAAA;;AAAA;AAAA;AAAA;AAkBME,qBAAO,CAACC,GAAR;;AAlBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAqBW;AACP,aACE,2DAAC,OAAD,CAAS,QAAT;AAAkB,aAAK,EAAE,KAAKC;AAA9B,SACG,KAAKC,KAAL,CAAWC,QADd,CADF;AAKD;AA3BH;;AAAA;AAAA,EAA8BC,+CAA9B;AA8BO,IAAMC,QAAQ,GAAG1B,OAAO,CAAC0B,QAAzB,C","file":"main~resume.da0399540.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Stitch,\n  RemoteMongoClient,\n  AnonymousCredential\n} from 'mongodb-stitch-browser-sdk';\n\nconst Context = React.createContext();\nconst client = Stitch.initializeDefaultAppClient('react-resume-cptng');\n\nexport class Provider extends Component {\n  state = {\n    experiences: []\n  };\n\n  async componentDidMount() {\n    try {\n      await client.auth.loginWithCredential(new AnonymousCredential());\n      const db = client\n        .getServiceClient(RemoteMongoClient.factory, 'resume-server')\n        .db('resume');\n\n      let res = await db\n        .collection('experience')\n        .find()\n        .asArray();\n      this.setState({ experiences: [...res] });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n"],"sourceRoot":""}