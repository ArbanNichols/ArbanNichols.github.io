{"version":3,"sources":["webpack:///./src/jsx/components/common/context.jsx"],"names":["Context","React","createContext","client","Stitch","initializeDefaultAppClient","Provider","experiences","auth","loginWithCredential","AnonymousCredential","db","getServiceClient","RemoteMongoClient","factory","collection","find","asArray","res","setState","console","log","state","props","children","Component","Consumer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAMA,IAAMA,OAAO,GAAGC,4CAAK,CAACC,aAAN,EAAhB;AACA,IAAMC,MAAM,GAAGC,yEAAM,CAACC,0BAAP,CAAkC,oBAAlC,CAAf;AAEO,IAAMC,QAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,4DACY;AACJC,iBAAW,EAAE;AADT,KADZ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAOkBJ,MAAM,CAACK,IAAP,CAAYC,mBAAZ,CAAgC,IAAIC,sFAAJ,EAAhC,CAPlB;;AAAA;AAQkBC,gBARlB,GAQuBR,MAAM,CAACS,gBAAP,CAAwBC,oFAAiB,CAACC,OAA1C,EAAmD,eAAnD,EAAoEH,EAApE,CAAuE,QAAvE,CARvB;AAAA;AAAA,8CAU4BA,EAAE,CAACI,UAAH,CAAc,YAAd,EAA4BC,IAA5B,GAAmCC,OAAnC,EAV5B;;AAAA;AAUgBC,iBAVhB;AAWY,mBAAKC,QAAL,CAAc;AAAEZ,2BAAW,qBAAMW,GAAN;AAAb,eAAd;AAXZ;AAAA;;AAAA;AAAA;AAAA;AAaYE,qBAAO,CAACC,GAAR;;AAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAgBa;AACL,aACI,2DAAC,OAAD,CAAS,QAAT;AAAkB,aAAK,EAAE,KAAKC;AAA9B,SACK,KAAKC,KAAL,CAAWC,QADhB,CADJ;AAKH;AAtBL;;AAAA;AAAA,EAA8BC,+CAA9B;AA0BO,IAAMC,QAAQ,GAAG1B,OAAO,CAAC0B,QAAzB,C","file":"main~resume.e34bafc1c.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Stitch,\r\n    RemoteMongoClient,\r\n    AnonymousCredential\r\n} from 'mongodb-stitch-browser-sdk';\r\n\r\nconst Context = React.createContext();\r\nconst client = Stitch.initializeDefaultAppClient('react-resume-cptng');\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        experiences: [],\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            await client.auth.loginWithCredential(new AnonymousCredential());\r\n            const db = client.getServiceClient(RemoteMongoClient.factory, 'resume-server').db('resume');\r\n\r\n            let res = await db.collection('experience').find().asArray();\r\n            this.setState({ experiences: [...res] })\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport const Consumer = Context.Consumer;"],"sourceRoot":""}